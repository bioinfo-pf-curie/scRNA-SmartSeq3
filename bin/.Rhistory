setwd("~/Documents/Curie/SC_platform/Analysis/scRNAseq/1.Demultiplexing/smartSeq3/L384/")
## REFORMAT
listFile<-list.files(path = "matrices/human/")
i=1
for (file in listFile ){
matrix<-read.table(file = paste("matrices/human/", file, sep = ""), header=TRUE)
#matrix<-read.table(file = paste("matrices/mouse/", file, sep = ""), header=TRUE)
if( nrow(matrix)!=0 ){
# If repeated gene names (different chr (often Y_RNA))
matrix<-aggregate(matrix$count ~ matrix$gene, FUN=sum)
sample<-strsplit(x = file ,split = "ID") [[1]][1]
colnames(matrix)<-c("gene", sample)
if(i==1){
matrixFinal<-matrix
}else{
matrixFinal<-merge(matrixFinal, matrix, by = "gene", all= TRUE)
}
i=2
}
}
# Replace NA by 0 (row= genes/columns=sample)
matrixFinal[is.na(matrixFinal)]<-0
seq(1,length(matrixFinal))
# Transform into long format
longMatx<-melt(matrixFinal)
length(matrixFinal)
# Transform into long format
longMatx<-melt(matrixFinal)
longMatx<-longMatx[which(longMatx$value>0),]
library(plotrix)
library(plyr)
library(dplyr)
library(Seurat)
library(tibble)
library(reshape2)
library(ggplot2)
# Transform into long format
longMatx<-melt(matrixFinal)
longMatx<-longMatx[which(longMatx$value>0),]
matrixFinal<-column_to_rownames(matrixFinal, var = "gene")
# Normalize each count by the total number of umis per cell *10^5
normData<-data.frame(NormalizeData(matrixFinal, normalization.method="RC" , scale.factor = 100000))
# log transformation
normLogData<-log10(normData + 1)
# transform into long format
normLogDataLong<-melt(as.matrix(normLogData))
normLogDataLong<-normLogDataLong[which(normLogDataLong$value>0),]
# Make resume data
samples<-colnames(matrixFinal)
genes<-vector()
for(samp in samples){
genes<-append(genes, nrow(longMatx[which(longMatx$variable==samp),]) )
}
resume<-data.frame(nb_UMIs = colSums(matrixFinal), NormLog_nb_UMIs = round(colSums(normLogData)) , nb_Genes=genes)
#####  Long to sparse matrix:
####-----------------------------------------
library(Matrix)
longMatx$gene=as.factor(longMatx$gene)
longMatx$variable=as.factor(longMatx$variable)
longMatx$value=as.factor(longMatx$value)
sparseMtx <- with(longMatx, sparseMatrix(i=as.numeric(gene),
j=as.numeric(variable),
x=as.numeric(value),
dimnames=list(levels(gene), levels(variable))
)
)
#### Save results like 10X
####-----------------------------------------
library("DropletUtils")
cell.ids <- levels(longMatx[,2])
ngenes <- nrow(sparseMtx)
gene.ids <- paste0("ID", seq_len(ngenes))
gene.symb <-levels(longMatx[,1])
### Counts
#------------
hist_nbUMIperGene<-hist(normLogDataLong$value, xlab = "# UMIs (Log10)", ylab = "# Genes", main = "Number of UMIs per genes")
hist_nbUMIperCell<-hist(resume$NormLog_nb_UMIs, xlab = "# UMIs (Log10)", ylab = "# Cell")
hist_nbGenesPerCell<-hist(resume$nb_Genes, xlab = "# Genes", ylab = "# Cell")
wh_UMI<-weighted.hist(resume$NormLog_nb_UMIs, w=resume$NormLog_nb_UMIs,
main="Weighted distribution of umis per barcodes",
xlab="#UMIs per cell (log10)",
ylab="#UMIs", breaks = 5)
wh_UMI
wh_UMI<-weighted.hist(resume$NormLog_nb_UMIs, w=resume$nb_UMIs,
main="Weighted distribution of umis per barcodes",
xlab="#UMIs per cell (log10)",
ylab="#UMIs", breaks = 5)
wh_UMI<-weighted.hist(resume$NormLog_nb_UMIs, w=resume$NormLog_nb_UMIs,
main="Weighted distribution of umis per barcodes",
xlab="#UMIs per cell (log10)",
ylab="#UMIs", breaks = 5)
wh_UMI
wh_UMI<-weighted.hist(resume$NormLog_nb_UMIs, w=resume$NormLog_nb_UMIs,
main="Weighted distribution of umis per barcodes",
xlab="#UMIs per cell (log10)",
ylab="#UMIs")
wh_UMI<-weighted.hist(resume$NormLog_nb_UMIs, w=resume$NormLog_nb_UMIs,
main="Weighted distribution of umis per barcodes",
xlab="#UMIs per cell (log10)",
ylab="#UMIs", breaks = 100)
wh_UMI<-weighted.hist(resume$NormLog_nb_UMIs, w=resume$NormLog_nb_UMIs,
main="Weighted distribution of umis per barcodes",
xlab="#UMIs per cell (log10)",
ylab="#UMIs")
### Counts
#------------
hist_nbUMIperGene<-hist(normLogDataLong$value, xlab = "# UMIs (Log10Normalized)", ylab = "# Genes", main = "Number of UMIs per genes")
hist_nbUMIperCell<-hist(resume$NormLog_nb_UMIs, xlab = "# UMIs (Log10Normalized)", ylab = "# Cell")
TrimHistogram(hist_nbUMIperCell)
install.packages("HistogramTools")
library(HistogramTools)
TrimHistogram(hist_nbUMIperCell)
hist_nbUMIperCell<-hist(resume$NormLog_nb_UMIs, xlab = "# UMIs (Log10Normalized)", ylab = "# Cell")
hist_nbUMIperCell
hist(resume$NormLog_nb_UMIs, xlab = "# UMIs (Log10Normalized)", ylab = "# Cell")
hist(resume$NormLog_nb_UMIs, xlab = "# UMIs (Log10Normalized)", ylab = "# Cell")
hist_nbUMIperCell<-hist(resume$NormLog_nb_UMIs, xlab = "# UMIs (Log10Normalized)", ylab = "# Cell")
TrimHistogram(hist_nbUMIperCell)
TrimHistogram(hist_nbUMIperCell)
hist_nbGenesPerCell<-hist(resume$nb_Genes, xlab = "# Genes", ylab = "# Cell")
wh_UMI<-weighted.hist(resume$NormLog_nb_UMIs, w=resume$NormLog_nb_UMIs,
main="Weighted distribution of umis per barcodes",
xlab="#UMIs per cell (log10)",
ylab="#UMIs", breaks = 5)
wh_UMI<-weighted.hist(resume$NormLog_nb_UMIs, w=resume$NormLog_nb_UMIs,
main="Weighted distribution of umis per barcodes",
xlab="#UMIs per cell (log10)",
ylab="#UMIs")
TrimHistogram(wh_UMI)
wh_UMI<-weighted.hist(resume$NormLog_nb_UMIs, w=resume$NormLog_nb_UMIs,
main="Weighted distribution of umis per barcodes",
xlab="#UMIs per cell (log10)",
ylab="#UMIs")
TrimHistogram(wh_UMI)
HistToEcdf(wh_UMI)
HistToEcdf(hist_nbUMIperCell)
plot(HistToEcdf(hist_nbUMIperCell))
hist_nbUMIperCell
TrimHistogram(hist_nbUMIperCell)
hist_nbUMIperCell<-hist(resume$NormLog_nb_UMIs, xlab = "# UMIs (Log10Normalized)", ylab = "# Cell")
plot(HistToEcdf(hist_nbUMIperCell))
hist_nbGenesPerCell
sqrt(length(range(resume$nb_Genes)))
sqrt(length(resume$nb_Genes))
wh_UMI<-weighted.hist(resume$NormLog_nb_UMIs, w=resume$NormLog_nb_UMIs,
main="Weighted distribution of umis per barcodes",
xlab="#UMIs per cell (log10)",
ylab="#UMIs", breaks = 5)
sqrt(length(resume$nb_Genes))
round(sqrt(length(resume$nb_Genes)))
round(sqrt(length(resume$nb_Genes)))+1
resume$nb_Genes
round(sqrt(length(normLogDataLong$value)))+1
round(sqrt(length(normLogDataLong$value)))+1
### Counts
#------------
hist_nbUMIperGene<-hist(normLogDataLong$value, xlab = "# UMIs (Log10Normalized)", ylab = "# Genes", main = "Number of UMIs per genes", breaks = 294)
normLogDataLong$value
breaks <- pretty(range(normLogDataLong$value), n = nclass.FD(normLogDataLong$value[,]), min.n = 1)
breaks <- pretty(range(normLogDataLong$value), n = nclass.FD(normLogDataLong$value), min.n = 1)
bwidth <- breaks[2] - breaks[1]
bwidth
breaks
breaks[1]
breaks[2]
bwidth
### Counts
#------------
hist_nbUMIperGene<-hist(normLogDataLong$value, xlab = "# UMIs (Log10Normalized)", ylab = "# Genes", main = "Number of UMIs per genes", breaks = bwidth)
bwidth
normLogDataLong
