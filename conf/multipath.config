def checkProfileMultipath(path){
  if (new File(path).exists()){
    File directory = new File(path)
    def contents = []
    directory.eachFileRecurse (groovy.io.FileType.FILES) { file -> contents << file }
    if (!path?.trim() || contents == null || contents.size() == 0){
      println "   ### ERROR ###   The option '-profile multipath' requires the configuration of each tool path. See `--globalPath` for advanced usage."
      System.exit(-1)
    }
  }else{
    println "   ### ERROR ###   The option '-profile multipath' requires the configuration of each tool path. See `--globalPath` for advanced usage."
    System.exit(-1)
  }
}

singularity {
  enabled = false
}

docker {
  enabled = false
}

process {
  checkProfileMultipath(${params.geniac.multiPath})
  withLabel:multiqc { beforeScript = "export PATH=${params.geniac.multiPath}/multiqc/bin:$PATH" }
  withLabel:python { beforeScript = "export PATH=${params.geniac.multiPath}/python/bin:$PATH" }
  withLabel:umiTools { beforeScript = "export PATH=${params.geniac.multiPath}/umiTools/bin:$PATH" }
  withLabel:seqkit { beforeScript = "export PATH=${params.geniac.multiPath}/seqkit/bin:$PATH" }
  withLabel:cutadapt { beforeScript = "export PATH=${params.geniac.multiPath}/cutadapt/bin:$PATH" }
  withLabel:STAR { beforeScript = "export PATH=${params.geniac.multiPath}/STAR/bin:$PATH" }
  withLabel:featureCounts { beforeScript = "export PATH=${params.geniac.multiPath}/featureCounts/bin:$PATH" }
  withLabel:samtools { beforeScript = "export PATH=${params.geniac.multiPath}/samtools/bin:$PATH" }
  withLabel:deeptools { beforeScript = "export PATH=${params.geniac.multiPath}/deeptools/bin:$PATH" }
  withLabel:rseqc { beforeScript = "export PATH=${params.geniac.multiPath}/rseqc/bin:$PATH" }
  withLabel:R { beforeScript = "export PATH=${params.geniac.multiPath}/R/bin:$PATH" }
}
